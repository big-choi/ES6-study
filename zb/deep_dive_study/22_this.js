// 동작을 나타내는 메서드는 자신이 속한 프로퍼티의 값을 참조하거나 변경할 수 있어야 한다.
// 이때 메서드가 **자신이 속한 프로퍼티를 가리키는 식별자를 참조하고 변경**할 수 있어야 한다.
// 객체 리터럴 방식으로 생성한 객체의 메서드는 메서드를 호출한 객체를 가리키는 식별자를 재귀적으로 참조할 수 없다.

const circle = {
    // 프로퍼티: 객체 고유의 상태 데이터
    radius: 5,
    // 메서드: 상태 데이터를 참조하고 조작하는 동작
    getDiameter() {
        // 이 메서드가 자신이 속한 객체의 프로퍼티나 다른 메서드를 참조하려면
        // 자신이 속한 객체인 circle을 참조할 수 있어야 한다.
        return 2 * circle.radius;
    }
};

console.log(circle.getDiameter()); // 10

// 위 예제의 circle 객체는 객체 리터럴 방식으로 생성했다. 이때 메서드 내부에서 메서드를 호출한 객체를 가리키는 식별자를 참조하고 변경할 수 있는 방법이 없다.
// 따라서 메서드 내부에서 메서드를 호출한 객체를 참조하려면 메서드를 호출한 객체의 이름을 그대로 사용해야 한다.
// 하지만 이 방법은 객체의 이름이 바뀌면 메서드도 함께 바뀌어야 한다는 단점이 있다.
// 자기 자신이 속한 객체를 재귀적으로 참조하는 방식은 일반적이지 않다.
// 일반적으로 객체의 메서드는 자신이 속한 객체를 참조하기 위해 자신이 속한 객체를 가리키는 식별자를 사용하지 않는다.

// 따라서 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 식별자를 사용할 수 있는 방법이 필요하다.
// 이때 사용할 수 있는 것이 바로 this다. this는 자신이 속한 객체 또는 자신이 생성할 인스턴스를 가리키는 자기 참조 변수(self-referencing variable)다.
// this를 통해 자신이 속한 객체 또는 자신이 생성할 인스턴스의 프로퍼티나 메서드를 참조할 수 있다.

//

// 22.2 함수 호출 방식과 this 바인딩
// this가 가리키는 값, 즉 this 바인딩은 함수 호출 방식에 의해 동적으로 결정된다.

// 1. 일반 함수 호출
// 기본적으로 this에는 전역 객체가 바인딩된다.

function foo() {
    console.log("foo's this: ", this); // window
    function bar() {
        console.log("bar's this: ", this); // window
    }
    bar();
}
foo();

// this는 객체의 프로퍼티나 메서드를 참조하기 위한 자기 참조 변수이므로 일반 함수에서 this를 사용할 필요가 없다.

// 2. 메서드 호출
// 메서드 내부의 this에는 메서드를 호출한 객체, 즉 메서드를 호출할 때 메서드 이름 앞의 마침표(.) 연산자 앞에 기술한 객체가 바인딩된다.
// 주의할 점은 메서드 내부의 this는 메서드를 소유한 객체가 아닌 메서드를 호출한 객체에 바인딩된다는 것이다.

const person = {
    name: 'Lee',
    getName() {
        // 메서드 내부의 this는 메서드를 호출한 객체에 바인딩된다.
        return this.name; // this는 person을 가리킨다.
    }
};

// 메서드 getName을 호출한 객체는 person이다.
console.log(person.getName()); // Lee

// 위 예제의 getName 프로퍼티가 가리키는 함수 객체는 person 객체에 포함되어 있는 것이 아닌, 독립적으로 존재하는 별도의 객체다.
// 따라서 getName 메서드는 다른 객체의 메서드가 될 수도 있고, 일반 변수에 할당되어 일반 함수처럼 호출될 수도 있다.
// 그러므로 메서드 내부의 this는 프로퍼티로 메서드를 가리키고 있는 객체와는 관계가 없고 메서드를 호출한 객체에 바인딩된다.

// 3. 생성자 함수 호출
// 생성자 함수 내부의 this에는 생성자 함수가 (미래에) 생성할 인스턴스가 바인딩된다.

function Circle(radius) {
    // 생성자 함수 내부의 this는 생성자 함수가 생성할 인스턴스를 가리킨다.
    this.radius = radius;
    this.getDiameter = function () {
        return 2 * this.radius;
    };
}

// 반지름이 5인 Circle 객체를 생성
const circle1 = new Circle(5);
// 반지름이 10인 Circle 객체를 생성
const circle2 = new Circle(10);

console.log(circle1.getDiameter()); // 10
console.log(circle2.getDiameter()); // 20

// 생성자 함수는 객체(인스턴스)를 생성하는 함수다. 따라서 생성자 함수는 반드시 new 연산자와 함께 호출해야 한다.
// 만약 new 연산자와 함께 호출하지 않으면 일반 함수로서 호출된다.


