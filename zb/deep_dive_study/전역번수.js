// 전역 변수의 무분별한 사용은 위험하다. 반드시 사용해야 할 이유를 찾지 못한다면 지역변수를 사용해야 한다.

// 14.1 변수의 생명 주기

// 변수는 자신이 선언 위치에서 생성되고 소멸한다.
// 전역변수의 생명 주기는 애플리케이션의 생명 주기와 같다.
// 하지만 내부 함수에서 선언된 지역변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다.

function foo() {
    var x = 'local';
    console.log(x); // local
    return x;
}

foo();
console.log(x); // ReferenceError: x is not defined

// 위 예제에서 지역변수 x는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다.
// 따라서 함수 외부에서는 지역변수 x를 참조할 수 없다.
// 변수 x는 선언되고 undefined로 초기화된 이후에 함수가 호출되어 변수에 값이 할당되고, 함수가 종료되면 변수도 소멸한다.

// 할당된 메모리 공간은 누구도 차조하지 않을 때 GC에 의해 소멸한다.
// 즉, 누군가가 참조하고 있다면 소멸되지 않는다. 이는 스코프도 마찬가지이다.

var x = 'global';

function foo() {
    console.log(x); // undefined
    var x = 'local';
    console.log(x); // local
}

foo();
console.log(x); // global

// 함수 내부에 정의된 console.log(x)는 지역변수 x를 참조한다.
// 이때 지역변수 x는 선언되었지만 초기화되지 않았다.
// 따라서 선언문 이전에 변수에 접근하면 변수가 호이스팅되어 undefined로 초기화된다.
// 이처럼 호이스팅은 스코프 단위로 동작한다. 즉 호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작한다.


// 14.2 전역 변수의 문제점
// 코드 어디서든 참조할 수 있는 전역 변수는 어디서 어떻게든 변경될 위험이 있다.
// 이는 암묵적 결합을 허용하는 것이다. 즉, 모든 코드가 전역 변수를 참조하고 변경할 수 있는 것이다.
// 1. 긴 생명 주기
// 라이프 사이클이 길다. 메모리 리소스도 오랜 기간 소비한다. 또한 변수의 상태를 변경할 수 있는 시간도 길다.
// 2. 스코프 체인 상에서 종점에 존재
// 전역 변수의 검색 속도가 가장 느리다. 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색되기 때문이다.
// 3. 네임스페이스 오염
// 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.

// 14.3 전역 변수의 사용을 억제하는 방법
// 전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 한다.
// 1. 즉시 실행 함수
// 모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 된다.
(function () {
    var foo = 10; // 즉시 실행 함수의 지역 변수
    // ...
}());
console.log(foo); // ReferenceError: foo is not defined

// 2. 네임스페이스 객체
// 전역에 네임스페이스 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.
var MYAPP = {}; // 전역 네임스페이스 객체

MYAPP.name = 'Lee';

console.log(MYAPP.name); // Lee

// 3. 모듈 패턴
// 모듈 패턴은 클래스를 모방하여 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다.

// 4. ES6 모듈
// ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다.
<script type="module" src="foo.js"></script>