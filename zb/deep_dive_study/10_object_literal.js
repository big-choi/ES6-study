// 10.1 객체란?
// 원시 값을 제외한 나머지(함수, 배열 등)은 모두 객체다. 원시 타입은 변경 불가능한 값, 객체는 변경 가능한 값이다.
// 객체는 0개 이상의 프로퍼티로 구성된 집합이고, 키와 값으로 구성된다. 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드라 부른다.
// 프로퍼티 : 객체의 상태를 나타내는 값(data)
// 메서드 : 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)

// 객체와 함수
// 객체와 함수는 밀접한 관계를 가진다. 함수로 객체를 생성하기도 하고 하며 함수 자체가 객체이기도 하다.
// 객체를 이해해야 함수를 제대로 이해할 수 있고, 함수를 이해해야 객체를 제대로 이해할 수 있다.

// 10.2 객체 리터럴에 의한 객체 생성
// 자바는 new 연산자를 사용하지만 JS는 다양한 방법을 지원하지만 일반적으로 객체 리터럴을 사용한다.
// 객체 리터럴은 중괄호 내에 프로퍼티를 정의한다. 만약 중괄호 내에 프로퍼티를 정의하지 않으면 빈 객체가 생성됨.
// 인스턴스 : 클래스에 의해 생성되어 메모리에 저장된 실체. 클래스는 인스턴스를 생성하기 위한 템플릿의 역할을 한다.
// 인스턴스는 객체가 메모리에 저장되어 실제로 존재하는 것을 말한다.

// 일반적으로 객체 리터럴을 사용해 객체를 생성한다. 객체 리터럴은 중괄호 내에 0개 이상의 프로퍼티를 정의한다.
// 변수에 할당되는 시점에 자바스크립트 엔진은 객체 리터럴을 해석해 객체를 생성한다.

var person = {
    name: 'Lee',
    sayHello: function () {
        console.log(`Hello! My name is ${this.name}.`);
    }
};

console.log(typeof person); // object
console.log(person); // { name: 'Lee', sayHello: [Function: sayHello] }

// 만약 중괄호 내에 프로퍼티를 정의하지 않으면 빈 객체가 생성된다.

var empty = {}; // 빈 객체
console.log(typeof empty); // object

// 객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다. 코드 블록의 닫는 중괄호 뒤에는 세미콜론을 붙이지 않지만 객체 리터럴의 닫는 중괄호 뒤에는 세미콜론을 붙인다.

// 10.3 프로퍼티
// 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성된다. 프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름(식별자)이다.

var person = {
    // 프로퍼티 키는 name, 프로퍼티 값은 'Lee'
    name: 'Lee',
    // 프로퍼티 키는 age, 프로퍼티 값은 20
    age: 20
};

// 10.4 메서드
// 자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값으로 사용할 수 있다. 따라서 함수도 프로퍼티 값으로 사용할 수 있다.
// 프로퍼티의 값이 함수일 경우 일반 함수와 구분하기 위해 메서드라 부른다. 즉, 메서드는 객체에 묶여 있는 함수를 의미한다.

var circle = {
    radius: 5, // ← 프로퍼티

    // 원의 지름: 2r
    getDiameter: function () { // ← 메서드
        return 2 * this.radius; // this는 circle을 가리킨다.
    }
};

console.log(circle.getDiameter()); // 10

// 메서드 내부에서 사용한 this 키워드는 객체 자신(메서드를 호출한 객체)을 가리킨다.

// 10.5 프로퍼티 접근
// 마침표 프로퍼티 접근 연산자(.)를 사용하는 마침표 표기법
// 대괄호([])를 사용하는 대괄호 표기법

// 10.6 프로퍼티 값 갱신
// 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다. 프로퍼티 값의 갱신은 단지 값을 기존의 값에서 새로운 값으로 바꾸는 것이다.

var person = {
    name: 'Lee'
};

// person 객체에 name 프로퍼티가 존재하므로 name 프로퍼티의 값이 갱신된다.
person.name = 'Kim';

console.log(person); // { name: 'Kim' }

// 10.7 프로퍼티 동적 생성
// 존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가되고 프로퍼티 값이 할당된다.
var person = {
    name: 'Lee'
};

// person 객체에는 age 프로퍼티가 존재하지 않는다.
// 따라서 person 객체에 age 프로퍼티가 동적으로 생성되고 값이 할당된다.
person.age = 20;

console.log(person); // { name: 'Lee', age: 20 }