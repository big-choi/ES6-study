// 15.1 var 키워드로 선언한 변수의 문제점

// ES5까지 변수를 선언할 수 있는 유일한 방법은 var 키워드를 사용하는 것이다.
// var 키워드로 선언된 변수는 아래와 같은 특징이 있다.

// 1. 변수 중복 선언 허용

var x = 1;
var y = 1;

var x = 100;
var y;

console.log(x); // 100
console.log(y); // 1

// 예제와 같이 만약 동일한 이름의 변수를 중복 선언되어 있는 것을 모르고 변수를 중복 선언하면서
// 값까지 할당했다면 의도치 않게 변수 값이 변경되는 부작용이 발생한다.

// 2. 함수 레벨 스코프
// var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정한다.
// 따라서 함수 외부에서 var 키워드로 선언된 변수는 코드 블록 내부에서 선언되었다 하더라도 모두 전역 변수다.

var x = 1;

if (true) {
    // var 키워드로 선언된 변수는 함수의 코드 블록(함수 몸체)만을 지역 스코프로 인정한다.
    // 함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내부에서 선언되었다 하더라도 모두 전역 변수다.
    // 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.
    var x = 10;
}

console.log(x); // 10

// for 문의 변수 선언문에서 var 키워드로 선언한 변수도 전역 변수다.
var i = 10;

for (var i = 0; i < 5; i++) {
    console.log(i); // 0 1 2 3 4
}

console.log(i); // 5

// 함수 레벨 스코프는 전역 변수를 남발하게 만들고 의도치 않게 전역 변수의 값이 변경되는 부작용을 발생시킨다.


// 3. 변수 호이스팅
// var 키워드로 변수 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작한다.
// 단, 할당문 이전에 변수를 참조하면 undefined가 반환된다.

// 15.2 let 키워드
// ES6에서 도입된 let 키워드는 var 키워드의 단점을 보완하기 위해 도입되었다.

// 1. 변수 중복 선언 금지
// let 키워드로 선언한 변수는 같은 스코프 내에서 중복 선언이 허용되지 않는다.
var foo = 123;

var foo = 456;

// let bar = 123;

let bar = 456; // SyntaxError: Identifier 'bar' has already been declared

// 2. 블록 레벨 스코프
// let 키워드로 선언된 변수는 블록 레벨 스코프를 따른다.
// 따라서 코드 블록 내에서 선언된 변수는 지역 변수다.
// 블록 레벨 스코프를 따르는 let 키워드는 모든 코드 블록(함수, if문, for문, while문, try/catch문 등)
// 내에서 유효하다.

let foo = 1; // 전역 변수

{
    let foo = 2; // 지역 변수
    let bar = 3; // 지역 변수
}

console.log(foo); // 1
console.log(bar); // ReferenceError: bar is not defined

// 3. 변수 호이스팅
// let 키워드로 선언한 변수는 호이스팅이 발생하지 않는 것처럼 동작한다.
// 단, 변수 선언문 이전에 변수를 참조하면 참조 에러(ReferenceError)가 발생한다.

console.log(foo); // ReferenceError: foo is not defined

let foo;
console.log(foo); // undefined

foo = 1;
console.log(foo); // 1


// 15.3 const 키워드
// const 키워드는 let 키워드와 마찬가지로 블록 레벨 스코프를 지원한다.
// const 키워드는 상수(constant)를 선언하기 위해 사용한다.
// 상수는 재할당이 금지되며 선언과 동시에 초기화(할당)해야 한다.

// const 키워드와 객체
// const 키워드로 선언된 변수에 원시 값을 할당한 경우 원시 값은 변경할 수 없는 상수가 되지만,
// const 키워드로 선언된 변수에 객체를 할당한 경우 객체의 내용(프로퍼티, 메서드)을 변경할 수 있다.
// 변경 가능한 값인 객체는 재할당 없이 변경이 가능하기 때문.

// 15.4 var vs let vs const
// var 키워드는 함수 레벨 스코프를 지원하고, let, const 키워드는 블록 레벨 스코프를 지원한다.
// 변수 선언에는 기본적으로 const를 사용하고, 재할당이 필요한 경우에 한정해 let을 사용한다.
// var는 사용하지 않는다.

